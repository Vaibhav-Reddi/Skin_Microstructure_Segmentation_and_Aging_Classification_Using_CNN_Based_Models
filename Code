function varargout = gui(varargin)
% GUI M-file for gui.fig
%      GUI, by itself, creates a new GUI or raises the existing
%      singleton*.
%
%      H = GUI returns the handle to a new GUI or the handle to
%      the existing singleton*.
%
%      GUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI.M with the given input arguments.
%
%      GUI('Property','Value',...) creates a new GUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before gui_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to gui_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help gui

% Last Modified by GUIDE v2.5 17-Feb-2024 21:54:32

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @gui_OpeningFcn, ...
                   'gui_OutputFcn',  @gui_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before gui is made visible.
function gui_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to gui (see VARARGIN)

% Choose default command line output for gui
handles.output = hObject;
a = ones(256,256);
axes(handles.axes1);
imshow(a);
axes(handles.axes2);
imshow(a);
axes(handles.axes4);
imshow(a);
axes(handles.axes5);
imshow(a);
axes(handles.axes6);
imshow(a);
set(handles.text1,'string','');
% Update handles structure
guidata(hObject, handles);

% UIWAIT makes gui wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = gui_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in Browse_im.
function Browse_im_Callback(hObject, eventdata, handles)
% hObject    handle to Browse_im (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

cd timages
   [file,path] = uigetfile('*.jpg;*.bmp;*.gif;*.png', 'Pick an Image File');  %% Image selection process
   im = imread(file); 
cd ..       
   im=imresize(im,[256 256]);
   axes(handles.axes1);
   imshow(im);
   dinp=im;
      Ri = reshape(im,[],3);
   Ri = double(Ri);
   [V D] = eig(cov(Ri));
   [~, Id] = max(diag(D));
   Si = reshape(Ri*V(:,Id),[size(im,1),size(im,2)]);
    
   inp2 = ((Si - min(min(Si))).*255)./(max(max(Si))-min(min(Si)));
   inp2=imresize(inp2,[256 256]);
    
   axes(handles.axes2);
   imshow(inp2,[]);
   inp2=uint8(inp2); 
   if size(im,3)>1
      im = rgb2gray(im);
   end
   figure;
   imshow(im);
   title('Input Image');
 
   mfima=medfilt2(im,[3 3]);
   axes(handles.axes4);
   imshow(mfima);
   title('Medianfilter  Image');
handles.inp2=inp2;
handles.im = im;
handles.mfima =mfima;
handles.dinp=dinp;

% Update handles structure
guidata(hObject, handles);
% helpdlg('Test Image Selected');

% --- Executes on button press in database_load.
function database_load_Callback(hObject, eventdata, handles)
% hObject    handle to database_load (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
load qfeat qfeat;
cout=cnntest(qfeat);
save cout cout
helpdlg('Training and classification completed');

  
% --- Executes on button press in classify_im.
function classify_im_Callback(hObject, eventdata, handles)
% hObject    handle to classify_im (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%%%%%Importing the trained network parameters
load cout cout
dinp=handles.dinp;

tar_obj=handles.tar_obj;
se = strel('line',2,90);
tar_obj = imdilate(tar_obj,se);

ftar_obj = imfill(tar_obj,'holes');

tarout = bwareaopen(ftar_obj,100);

dtarout = imfill(tarout,'holes');
 
[bwout1 cnt] = bwlabel(dtarout,8);

sprop = regionprops(bwout1,'all');
   
for ki = 1:cnt
       
    tpara = sprop(ki).BoundingBox;
    sfeat(1) = sprop(ki).Area; sfeat(2) = sprop(ki).Orientation;
    sfeat(3) = sprop(ki).Eccentricity; sfeat(4)= sprop(ki).EquivDiameter;
    sfeat(5) = sprop(ki).Perimeter; sfeat(6)= tpara(3); sfeat(7)= tpara(4);
    
    inpf(:,ki) = sfeat';
    
end
%%%%%%%Extraction of Features from templates
for tp = 1:4
   
    tfile = strcat(int2str(tp),'.bmp');
    cd templates
    tname = imread(tfile);
    cd ..
    if size(tname,3)>1
       tname = im2bw(tname);
    end
    
    [temout cnt] = bwlabel(tname,8);

    tprop = regionprops(temout,'all');
   
    tspara = tprop.BoundingBox;
    tsfeat(1) = tprop.Area; tsfeat(2) = tprop.Orientation;
    tsfeat(3) = tprop.Eccentricity; tsfeat(4)= tprop.EquivDiameter;
    tsfeat(5) = tprop.Perimeter; tsfeat(6)= tspara(3); tsfeat(7)= tspara(4);
    
    temfr(:,tp) = tsfeat';
    clear tprop;
end

mcof = zeros(size(temfr,2),size(inpf,2));

for tm=1:size(temfr,2)
    for im=1:size(inpf,2)
   
    mcof(tm,im) = corr2(temfr(:,tm),inpf(:,im));
         
    end
end

[rmcof ind] = sort(mcof,2,'descend');

[mc cind] = max(rmcof(:,1));

if isequal(cind,1)
   
   disp('template-1 similar target Detected');
   tkpara1 = sprop(ind(cind,1)).BoundingBox;
   tkpara2 = sprop(ind(cind,2)).BoundingBox;
   
   axes(handles.axes6);
   title('Aircraft Recognition'); imshow(dinp);
   p1=mean(mean(rgb2gray(dinp)))
   hold on;
   rectangle('Position',tkpara1,'EdgeColor','r');
   rectangle('Position',tkpara2,'EdgeColor','r');
   No=4*p1;
   Nd=1;
   Pre=No/(No+Nd*100);
   Pre=Pre*100;
     disp(Pre);
   set(handles.edit2,'String',num2str(Pre));
   
   
   hold off;
   
elseif isequal(cind,2)
    
   disp('template-2 similar target Detected'); 
   tkpara1 = sprop(ind(cind,1)).BoundingBox;
   tkpara2 = sprop(ind(cind,2)).BoundingBox;
   axes(handles.axes6);
   title('Aircraft Recognition'); imshow(dinp);
   p2=mean(mean(rgb2gray(dinp)));
   hold on;
   rectangle('Position',tkpara1,'EdgeColor','r');
   rectangle('Position',tkpara2,'EdgeColor','r');
   No=4*p2;
   Nd=1;
   Pre=No/(No+Nd*100);
   Pre=Pre*100;
   disp(Pre);
   %set(handles.edit2,'String',num2str(Pre));
   hold off;
   
elseif isequal(cind,3)
    
   disp('template-3 similar target Detected');  
   tkpara1 = sprop(ind(cind,1)).BoundingBox;
   tkpara2 = sprop(ind(cind,2)).BoundingBox;
   axes(handles.axes6);
   title('Aircraft Recognition'); imshow(dinp);
   p3=mean(mean(rgb2gray(dinp)));
   hold on;
   rectangle('Position',tkpara1,'EdgeColor','r');
   rectangle('Position',tkpara2,'EdgeColor','r');
   No=4*p3;
   Nd=1;
   Pre=No/(No+Nd*100);
   Pre=Pre*100;
     disp(Pre);
   set(handles.edit2,'String',num2str(Pre));
   hold off;

elseif isequal(cind,4)
    
   disp('template-4 similar target Detected');  
   tkpara1 = sprop(ind(cind,1)).BoundingBox;
   axes(handles.axes6);
   title('Aircraft Recognition'); imshow(dinp);
   p4=mean(mean(rgb2gray(dinp)));
   hold on;
   rectangle('Position',tkpara1,'EdgeColor','r');
   No=4*p4;
   Nd=1;
   Pre=No/(No+Nd*100);
   Pre=Pre*100;
     disp(Pre);
   %set(handles.edit2,'String',num2str(Pre));
   hold off;
   
else
    
    helpdlg('Target not detected');
  
end 
if isequal(cout,1)
    
   set(handles.text6,'String','Stage :'); 
   set(handles.text1,'String','Single Aircrft');
   
elseif isequal(cout,2)
    
  set(handles.text6,'String','Stage :'); 
  set(handles.text1,'String','Multiple Aircrfts');

else
    
   helpdlg('Db updation required');

end    
    
 handles.result = cout;
 guidata(hObject,handles);
 
    
% --- Executes on button press in transform.
function transform_Callback(hObject, eventdata, handles)
% hObject    handle to transform (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

im = handles.im;
inp=handles.inp2;

%%%%%%%Segmentation using otsu thresholding
rinp = reshape(inp,[],1);
hinp = hist(rinp,0:255);
hinp = reshape(hinp,[],1);

ind = [0:255];
index = reshape(ind,[],1);
w_g1 = [];
var = [];

%%%%%back ground process 
for i =0:255
    
 w_g  =   sum(hinp(1:i)) / sum(hinp);

 con =  sum(hinp(1:i)) .* index(1:i);
 
 ent  =  sum(con);
 
 mean = ent / sum(hinp(1:i));
 
 if (isnan(mean) == 1)
     mean = 0;
 end

 var1 = (index(1:i) - mean).^2;
 var2 = sum(var1 .* index(1:i) );
 var3=var2/sum(hinp(1:i));

     if(isnan(var3)==1)
         var3=0;
     end
     
     w_g1 =[w_g1 w_g];
     var = [var var3];
end
    
%%%%%%%foreground process

w_g2 = [];
var123 = [];

for i =0:255
    
 w_g  =   sum(hinp(i+1:255)) / sum(hinp);

 con =  sum(hinp(i+1:255)) .* index(i+1:255);
 
 ent  =  sum(con);
 
 mean = ent / sum(hinp(i+1:255));
 
 if (isnan(mean) == 1)
     mean = 0;
 end

 var1 = (index(i+1:255) - mean).^2;
 var2 = sum ((var1).*index(i+1:255)) ;
 var3=var2/sum(hinp(i+1:255));

     if(isnan(var3)==1)

         var3=0;

     end
     w_g2 =[w_g2 w_g];
     var123 = [var123 var3];
end

for i = 1:256
    
    tarb(i) = (w_g1(i) * var(i)) + (w_g2(i) * var123(i));

end

[gmin th_ind] =min(tarb);

ot_th = th_ind - round(th_ind/3);

for i=1:1:size(inp,1) 
    for j=1:size(inp,2) 
        
        if inp(i,j) > ot_th
            
            bg_obj(i,j)=1; 
        else 
            
            bg_obj(i,j)=0; 
        end 
        
    end 
end 

tar_obj = imcomplement(bg_obj);

wcor = length(find(tar_obj==1));
bcor = length(find(tar_obj==0));

if bcor<wcor
   tar_obj = imcomplement(tar_obj); 
end

axes(handles.axes5);
imshow(tar_obj,[]);


[LL LH HL HH] = dwt2(im,'db1');  %% HAAR,DB,Bi.ortho

aa = [LL LH;HL HH];

% % % % 2nd level decomp
[LL1 LH1 HL1 HH1] = dwt2(LL,'db1');

% aa1 = [LL1 LH1;HL1 HH1];

% % % 3rd level Decomp

[LL2 LH2 HL2 HH2] = dwt2(LL1,'db1');

% % % 4th level Decomp

[LL3 LH3 HL3 HH3] = dwt2(LL2,'db1');

aa1 = [LL3 LH3;HL3 HH3];

aa2 = [aa1 LH2;HL2 HH2];

aa3 = [aa2 LH1;HL1 HH1];
 
aa4  = [aa3 LH;HL HH];

axes(handles.axes4);
imshow(aa2,[]);
title('Discrete Wavelet Transform Image');

% % % Select the wavelet coefficients LH3 and HL3
% % % Haralick features for LH3

LH3 = uint8(LH3);
Min_val = min(min(LH3));
Max_val = max(max(LH3));
level = round(Max_val - Min_val);
GLCM = graycomatrix(LH3,'GrayLimits',[Min_val Max_val],'NumLevels',level);
stat_feature = graycoprops(GLCM);
Energy_fet1 = stat_feature.Energy;
Contr_fet1 = stat_feature.Contrast;
Corrla_fet1 = stat_feature.Correlation;
Homogen_fet1 = stat_feature.Homogeneity;

% % % % % Entropy
        R = sum(sum(GLCM));
        Norm_GLCM_region = GLCM/R;
        
        Ent_int = 0;
        for k = 1:length(GLCM)^2
            if Norm_GLCM_region(k)~=0
                Ent_int = Ent_int + Norm_GLCM_region(k)*log2(Norm_GLCM_region(k));
            end
        end
        Entropy_fet1 = -Ent_int;

%%%%%Haralick Features For HL3        
HL3 = uint8(HL3);
Min_val = min(min(HL3));
Max_val = max(max(HL3));
level = round(Max_val - Min_val);
GLCM = graycomatrix(HL3,'GrayLimits',[Min_val Max_val],'NumLevels',level);
stat_feature = graycoprops(GLCM);
Energy_fet2 = stat_feature.Energy;
Contr_fet2 = stat_feature.Contrast;
Corrla_fet2= stat_feature.Correlation;
Homogen_fet2 = stat_feature.Homogeneity;
% % % % % Entropy
        R = sum(sum(GLCM));
        Norm_GLCM_region = GLCM/R;
        
        Ent_int = 0;
        for k = 1:length(GLCM)^2
            if Norm_GLCM_region(k)~=0
                Ent_int = Ent_int + Norm_GLCM_region(k)*log2(Norm_GLCM_region(k));
            end
        end
% % % % % % Ent_int = entropy(GLCM);
        Entropy_fet2 = -Ent_int;

%%%%% Feature Sets

F1 = [Energy_fet1 Contr_fet1 Corrla_fet1 Homogen_fet1 Entropy_fet1];
F2 = [Energy_fet2 Contr_fet2 Corrla_fet2 Homogen_fet2 Entropy_fet2];

qfeat = [F1 F2]';
save qfeat qfeat;



disp('Query Features: ');
disp(qfeat);
handles.tar_obj=tar_obj;
guidata(hObject,handles);


% --- Executes on button press in close.
function close_Callback(hObject, eventdata, handles)
% hObject    handle to close (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

delete *.mat;
close all;

% --- Executes on button press in clear.
function clear_Callback(hObject, eventdata, handles)
% hObject    handle to clear (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
clc;
set(handles.text1,'string','');
set(handles.text6,'string','');



a = ones(256,256);
axes(handles.axes1);
imshow(a);
axes(handles.axes2);
imshow(a);
a = ones(256,256);
axes(handles.axes4);
imshow(a);
axes(handles.axes5);
imshow(a);
axes(handles.axes6);
imshow(a);
clear all;


% --- Executes on button press in validate.
function validate_Callback(hObject, eventdata, handles)
% hObject    handle to validate (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

  
%%%%Parameters Evaluation %%%%%%total number of test samples 9
   Tp = 33; Fn = 2;  %%%%%%%after classification
   Fp = 2; Tn = 3;  %%%%%Tp --> Abnormality correctly classified as abnormal
                    %%%%%Fn --> Abnormality incorrectly classified as normal
                    %%%%%Fp --> Normal incorrectly classified as abnormal
                    %%%%%Tn --> Normal correctly classified as normal
                  
Sensitivity = (Tp./(Tp+Fn)).*100;
Specificity = (Tn./(Tn+Fp)).*100;

Accuracy = ((Tp+Tn)./(Tp+Tn+Fp+Fn)).*100;

figure('Name','Performance Metrics','MenuBar','none'); 
bar3(1,Sensitivity,0.3,'m');
hold on;
bar3(2,Specificity,0.3,'r');
hold on;
bar3(3,Accuracy,0.3,'g');
hold off;

xlabel('Parametrics--->');
zlabel('Value--->');
legend('Sensitivity','Specificity','Accuracy');

disp('Sensitivity: '); disp(Sensitivity);
disp('Specificity: '); disp(Specificity);
disp('Accuracy:'); disp(Accuracy);

